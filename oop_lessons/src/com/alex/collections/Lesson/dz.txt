Задача 1
Написать метод markLength4, принимающий в качестве параметра список (List) строк и размещающий строку "****" перед каждым четырёхсимвольным элементом. Оригинальные элементы должны остаться на месте.

Например:

{"this", "is", "lots", "of", "fun", "for", "every", "Java", "programmer"}

->

{"****", "this", "is", "****", "lots", "of", "fun", "for", "every", "****", "Java", "programmer"}

﻿Задача 2
Создать класс Student, представляющий собой ученика.
Добавить ему данные об имени, фамилии, возрасте и среднем балле за год.
Создать список (List) учеников. Найти и вывести ученика с самым высоким средним баллом используя итератор.
Отсортировать и вывести список учеников по полному имени (имя + фамилия), возрасту и среднему баллу, используя компараторы.


Решение1
https://github.com/dmdev2020/java-level2-starter/tree/lesson-19.11-hw/src/com/dmdev/oop/lesson19/hw1/task1

Решение2
https://github.com/dmdev2020/java-level2-starter/tree/lesson-19.11-hw/src/com/dmdev/oop/lesson19/hw1/task2



Задание 1
Дан список чатов.
Каждый чат состоит из двух полей: название и количество пользователей в этом чате.

Задача:

- Удалить с помощью итератора из этого списка те чаты, что содержат менее 1000 пользователей.

- Оставшиеся чаты отсортировать с помощью компараторов по убыванию по количеству пользователей, а если это количество совпадает, то по названию в алфавитном порядке.

- Также предоставить сортировку чатов по названию по умолчанию.

Задание 2
Дан список чатов с предыдущего задания, только вместо поля “количество пользователей” будет список объектов типа Пользователь, который имеет 3 поля: id (целочисленный идентификатор), имя и возраст.

Задача:

- Преобразовать список чатов в один список пользователей всех чатов, возраст которых больше 18 лет

- С помощью итератора посчитать средний возраст всех оставшихся пользователей.


Задача 1
Задан текст на английском языке.
Выделить все различные слова.
Для каждого слова подсчитать частоту его встречаемости.
Слова, отличающиеся регистром букв, считать различными.

﻿Задача 2
Создать абстрактный класс Car, представляющий собой автомобиль.

Добавить в него поля: марка, модель, год выпуска + несколько своих.
Создать 4 класса, являющихся наследниками Car.

Переопределить во всех 3-х классах методы equals(), hashCode() и toString()
Создать класс Garage, хранящий в себе HashMap автомобилей, в котором ключом является объект автомобиля, значением - количество точно таких автомобилей в гараже.

Добавить в класс Garage методы для парковки, выезда авто, а также для получения количества определенного вида автомобилей.

Продемонстрировать работу гаража.

Решения
https://github.com/dmdev2020/java-level2-starter/tree/lesson-19.15-hw/src/com/dmdev/oop/lesson19/hw2/task1
https://github.com/dmdev2020/java-level2-starter/tree/lesson-19.15-hw/src/com/dmdev/oop/lesson19/hw2/task2


домашнее.
Даны 2 класса:

- Фильм с 5-ю полями: Уникальный Целочисленный идентификатор (id), Год издания, Месяц издания, Жанр и Рейтинг;

- Кинотеатр, где есть всего лишь одно единственное поле: отсортированный ассоциативный массив, где ключом является год издания, а значением - все фильмы, выпустившиеся в этом году.

Добавить функционал в кинотеатр таким образом, чтобы можно было:

- добавлять в него новый фильм

- получить все фильмы по переданному году

- получить все фильмы по переданному году и месяцу

- получить все фильмы по переданному жанру

- получать ТОП-10 фильмов отсортированные по Рейтингу в порядке убывания

Учесть следующее:

- в кинотеатре фильмы должны храниться в порядке их добавления в него (т.е. предусмотреть порядок значения ассоциативного массива)

- не должен добавляться фильм, если такой уже есть в кинотеатре

Продемонстрировать работу кинотеатра в отдельном классе.